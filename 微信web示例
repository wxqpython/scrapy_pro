http://www.cnblogs.com/wupeiqi/articles/6283017.html   # requests/BeautifaulSoup语法

HTTP： 一次请求一次断开，无状态协议

微信扫码登录流程：
1 客户端发送请求：https://wx.qq.com/
2 服务端返回数据：二维码
3 手机扫码登录： 手机扫码消息发送给服务器，服务端如何向客户端浏览器发消息，跳转页面登录成功。



服务器是不会主动给客户端发消息的，如何解决？
方法一： 轮循
   浏览器需要隔断时间向服务端发送一个http请求，检测是不是扫码，这种方式称为轮循（性能低）

方法二：长轮循
   浏览器循环发送请求，服务器拿到请求，在超时时间内pending请求，有了结果马上返回给浏览器，断开连接，超时后
   断开连接没有返回结果，浏览器会再次发送请求，这种称为长轮循.
   
方法三： 服务器可以向客户端发消息，以后学   
WebSocket：
      1 性能非常好，自己内部一套协议实现（非HTTP），但兼容性不够好，相信随着时间推移会取代长轮循
      2 特性： 客户端可以发消息给服务端，服务端也可以发消息能客户端，称为双通道或全双工工作

登录成功后让你跳转的页面，这个URL当心了:
      1 可以会让你提供cookies,所以登录成功时保存好cookies, 
      2 让你跳转的URL可能浏览器自己加了一些东西，你没加上，直接URL跳转是不成功的
      

当requests拿不到网页时考虑4个点：UserAgent refered host cookies 

dic = {"name":"旺旺","pwd":123}
Query String Parameter URL传参时requests.get(url="xx", params=dic) #在请求头上，封装格式为application/x-www-form-urlencoded
Form Data         requests.post(url="xx",data=dic)                # 在请求体上，封装格式为application/x-www-form-urlencoded 
Request Payload   requests.post(url="xx",json=dic)                # 请请求体上，封装格式为application/json

说明： data传参很灵活
底层Socket发送都是字节
如果你传入的是一个字典data=dic，自动帮你序列化后转为字节发送出去
如果你传入的是一个json.dumps后的字符串，就给你转为字节后发送出去
如果你传入的是字节，直接就发送出去

requests.post(url="xx",json=dic)   # 这种方式不够灵活，不好传参，可以改写为如下：
requests.post(url="xx",
              data=json.dumps(dic,ensure_ascii=False).encode("utf-8"),
              headers={"Content=Type":"application/json"},
              cookies=all_cookies_dict
              )


#

迭代器： 可以被next()不断调用，不断返回下一个值直到stopIterator的对象称为可迭代对象：t=iter([1,2,3,4])--> next(t)
生成器： 一边yield一边next()的：一种特殊的迭代器
可迭代对象： 表面看可以作用于for循环的都是可迭代对象，有__iter__()方法并且返回迭代器就称为可迭代对象
   迭代器=iter(可迭代对象)
   
   

















